graph TD
    A[Start: Customer Service Center Setup] --> B[Clone Repository]
    B -->|"git clone https://github.com/mahmud-r-farhan/Customer-Service-Center"| C{Choose Setup Method}
    
    C --> D[Local Server Setup]
    C --> E[Docker Setup]
    C --> F[Deploy as Local SaaS]
    
    %% Local Server Setup Branch
    D --> G{Select Operating System}
    G --> H[Linux Ubuntu/Debian]
    G --> I[Windows]
    G --> J[macOS]
    
    %% Linux Setup Path
    H --> H1[Install Node.js]
    H1 -->|sudo apt update<br/>sudo apt install nodejs| H2[Install MongoDB]
    H2 -->|sudo apt install mongodb<br/>sudo systemctl start mongodb| H3[Install Backend Dependencies]
    H3 -->|npm install| H4[Configure Backend .env]
    H4 -->|PORT=5000<br/>MONGODB_URI=mongodb://localhost:27017/customer_service_center<br/>JWT_SECRET=your_secure_jwt_secret<br/>frontendURL=http://localhost:5173| H5[Start Backend Server]
    H5 -->|node server.js| H6[Setup Frontend]
    H6 -->|cd frontend<br/>npm install| H7[Configure Frontend .env]
    H7 -->|VITE_SERVER_URL=http://localhost:5000<br/>VITE_WS_URL=ws://localhost:5000| H8[Run Frontend Server]
    H8 -->|npm run dev| H9[Access at http://localhost:5173]
    
    %% Windows Setup Path
    I --> I1[Download Node.js]
    I1 -->|From nodejs.org LTS version| I2[Install MongoDB]
    I2 -->|Download MongoDB Community Server<br/>from mongodb.com| I3[Install Backend Dependencies]
    I3 -->|npm install| I4[Configure Backend .env]
    I4 -->|Same as Linux configuration| I5[Start Backend]
    I5 -->|node server.js| I6[Setup Frontend]
    I6 -->|cd frontend<br/>npm install| I7[Configure Frontend .env]
    I7 -->|Same as Linux configuration| I8[Run Frontend]
    I8 -->|npm run dev| I9[Access at http://localhost:5173]
    
    %% macOS Setup Path
    J --> J1[Install Node.js via Homebrew]
    J1 -->|brew install node| J2[Install MongoDB via Homebrew]
    J2 -->|brew tap mongodb/brew<br/>brew install mongodb-community<br/>brew services start mongodb/brew/mongodb-community| J3[Follow Linux Steps 3-9]
    J3 --> J9[Access at http://localhost:5173]
    
    %% Docker Setup Path
    E --> E1[Install Docker]
    E1 -->|Linux: sudo apt install docker.io<br/>Windows/macOS: Docker Desktop| E2[Create docker-compose.yml]
    E2 -->|Define services: backend, frontend, mongo| E3[Create Backend Dockerfile]
    E3 -->|FROM node:18<br/>WORKDIR /app<br/>npm install<br/>CMD node server.js| E4[Create Frontend Dockerfile]
    E4 -->|FROM node:18<br/>WORKDIR /app<br/>npm install<br/>CMD npm run dev| E5[Build and Run]
    E5 -->|docker-compose up --build| E6[Access at http://localhost:5173]
    
    %% Local SaaS Deployment Path
    F --> F1[Ensure Docker Running]
    F1 --> F2[Find Local IP Address]
    F2 -->|Linux/macOS: ifconfig<br/>Windows: ipconfig| F3[Update Environment Variables]
    F3 -->|Replace localhost with local IP| F4[Configure Firewall]
    F4 -->|Open ports 5000, 5173, 27017| F5[Network Access Ready]
    F5 -->|Access from any device: http://local-ip:5173| F6[Local SaaS Deployed]
    
    %% Application Usage Flow
    H9 --> K[Application Usage]
    I9 --> K
    J9 --> K
    E6 --> K
    F6 --> K
    
    K --> K1[Agent Registration & Login]
    K1 -->|/register for new agents<br/>/login for existing agents| K2[Customer Management]
    
    K2 --> K2a[Add New Customer]
    K2a -->|/add-guest<br/>Enter name and phone<br/>Generate unique token| K2b[View Queue Status]
    K2b -->|/serial<br/>See current serving token<br/>View upcoming customers| K3[Agent Dashboard Operations]
    
    K3 --> K3a[Call Next Customer]
    K3a --> K3b[Mark Consultation Complete]
    K3b --> K3c[Export Data]
    K3c -->|Export last 24h to Excel| K4[Real-time Features]
    
    K4 --> K4a[WebSocket Updates]
    K4a -->|Instant queue changes<br/>Client status updates<br/>Live notifications| K5[Profile Management]
    K5 -->|/settings<br/>Update name and email| K6[Complete Workflow]
    
    %% API Endpoints Reference
    K6 --> L[API Endpoints Available]
    L --> L1[Authentication APIs]
    L1 -->|POST /api/auth/register<br/>POST /api/auth/login<br/>PUT /api/auth/settings| L2[Client Management APIs]
    L2 -->|GET /api/clients<br/>POST /api/clients<br/>PUT /api/clients/:id/status| L3[WebSocket Events]
    L3 -->|CLIENTS_UPDATE<br/>CLIENT_STATUS_UPDATED<br/>CLIENT_ASSIGNED| L4[System Ready]
    
    %% Styling
    classDef setupMethod fill:#e1f5fe
    classDef osChoice fill:#f3e5f5
    classDef config fill:#fff3e0
    classDef usage fill:#e8f5e8
    classDef api fill:#fce4ec
    
    class D,E,F setupMethod
    class H,I,J osChoice
    class H4,H7,I4,I7,F3 config
    class K,K1,K2,K3,K4,K5,K6 usage
    class L,L1,L2,L3,L4 api